# -*- coding: utf-8 -*-
"""Devoir 1_exponential.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1FEbl9JzBnOtM66QB2NLCcnjPnGDr9tDz
"""

# On a besoin de cette fonction pour representer les graphs
def configure_plotly_browser_state():
  import IPython
  display(IPython.core.display.HTML('''
        <script src="/static/components/requirejs/require.js"></script>
        <script>
          requirejs.config({
            paths: {
              base: '/static/base',
              plotly: 'https://cdn.plot.ly/plotly-latest.min.js?noext',
            },
          });
        </script>
        '''))

# Cette fonction est necessaire pour ouvrir les données
from google.colab import files

uploaded = files.upload()

for fn in uploaded.keys():
  print('User uploaded file "{name}" with length {length} bytes'.format(
      name=fn, length=len(uploaded[fn])))

"""# Open and preprocess the data"""

# Import required modules
import pandas as pd
import numpy as np

# Import .csv
exponential_data = pd.read_csv('exponential_data.csv', index_col=0)
exponential_data.head(5)

# On veut diviser les données par trimèstre, donc on fait 40 divisions
failure_density, failure_time = np.histogram(exponential_data.time, bins=40, range=[0,10], density=True)

# On ne veut pas le temps 0, car il n'y a aucune défaillanc#to remove it from the histogram plot
failure_time = failure_time[1:]

print(failure_density)
print('\n') # to insert empty line 
print(failure_time)

"""#Plot data"""

from plotly.offline import init_notebook_mode, iplot
import plotly.graph_objs as go

# Execute this two commands in order to display the graph in this window
init_notebook_mode(connected=True)
configure_plotly_browser_state()


# Reference: https://plot.ly/python/reference/#bar
# Create the graph
data = [go.Bar(
    x=failure_time,
    y=failure_density,
#     marker=dict(
#        color='white',
#        line = dict(
#          color = 'black',
#          width = 2
#        )
#     ),
)]


layout = go.Layout(
    autosize=False,
    width=1500,
    height=1000,
)


# Display the graph
fig = go.Figure(data=data, layout=layout)
iplot(fig)

"""# Find exponential parameters"""

import numpy as np

# np.exp is equivalent to: e^
# ** is equivalent to: ^

def exponential_cumulative(t,scale_param):
   # On change le nom pour que ça soit plus facile à voir la formule
  _lambda = scale_param
  
  
  return 1-np.exp(-t*_lambda)


def exponential_density(t,scale_param):
  # On change le nom pour que ce soit plus facile de voir la formule
  _lambda = scale_param
  
  return _lambda*np.exp(-t*_lambda)

# Pour vérifier qu'on a bien defini la fonction, on essaie avec t=lamba. Ça s'appele la vie carcateristique et devrait être 0.6321

t = 2
scale_param = 2

exponential_cumulative(t,scale_param)

# Maintenant on va chercher les paramétres qui ajustent la Weibull à nos données
# On va utiliser le methode de "least squares" pour ça: https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.curve_fit.html

from scipy.optimize import curve_fit

parametres,covariance = curve_fit(exponential_density, failure_time, failure_density)

# Print the obtained parametres
print('Scale parametre (lambda) = ' + str(parametres[0]))

# On calcule nos fonctions avec les parametres estimées
predicted_density = exponential_density(failure_time, parametres[0])
predicted_cumulative = exponential_cumulative(failure_time, parametres[0])

"""# Plot exponential distribution"""

configure_plotly_browser_state()
# Plot the real density and the exponential density

# Create the graph
data = [
    go.Bar(
      name = 'Real',
      x=failure_time,
      y=failure_density,
    ),
    
    go.Scatter(
      name = 'Weibull',
      x = failure_time,
      y = predicted_density,       
    ),
]

   
layout = go.Layout(
    autosize=False,
    width=1500,
    height=1000,
)


# Display the graph
fig = go.Figure(data=data, layout=layout)
iplot(fig)

configure_plotly_browser_state()
# Plot the cumulative function

# Create the graph
data = [
    go.Bar(
      name = 'exponential Cumulative',
      x=failure_time,
      y=predicted_cumulative,
    ),
]


layout = go.Layout(
    autosize=False,
    width=1500,
    height=1000,
)


# Display the graph
fig = go.Figure(data=data, layout=layout)
iplot(fig)