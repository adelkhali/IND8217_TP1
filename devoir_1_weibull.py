# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Nsa8-Y-thZXLPxvpaJVAQXrnSqczIc-L
"""

import numpy as np
import matplotlib.pyplot as plt
from sklearn.metrics import r2_score
from sklearn import datasets
from sklearn.model_selection import train_test_split
digits = datasets.load_digits ( )
X = digits.data
y = digits. target
y_one_hot = np.zeros(( y.shape [ 0 ] , len(np.unique ( y ) ) ) )
y_one_hot[np.arange(y.shape [ 0 ] ) , y ] = 1 # one hot targett or shape NxK
X_train,X_test,y_train,y_test = train_test_split (X, y_one_hot , test_size =0.3 , random_state=42)
X_test, X_validation, y_test, y_validation = train_test_split(X_test,y_test,test_size =0.5,random_state=42)
W = np.random.normal( 0 , 0.01 , ( len(np.unique ( y ) ) , X. shape [ 1 ] ) )
def X_add (x,add): # 8 added values
    return np.random.normal( 0 , 0.01,(add,x.shape[1]))
def y_add (y,add): # 8 added values
    return np.random.normal( 0 , 0.01 , (add,y.shape[1]))
X_train=np.append(X_train,X_add(X_train,8),axis=0)
X_validation=np.append(X_validation,X_add(X_validation,8),axis=0)
X_test=np.append(X_test,X_add(X_test,8),axis=0)
y_train=np.append(y_train,y_add(y_train,8),axis=0)
y_validation=np.append(y_validation,y_add(y_validation,8),axis=0)
y_test=np.append(y_test,y_add(y_test,8),axis=0)
loss=[]
def Elastic_coef (y , y_pred ,K1) :
    loss=(1/(2*X_train.shape[0]))*np.square(np.linalg.norm(y_pred-y))+K1*(np.linalg.norm(W)+0.3*np.square(np.linalg.norm(W)))
    return loss
def softmax ( x ) :
    P_Y_sachant_X = np.exp(x) / np.sum(np.exp(x))
    return P_Y_sachant_X
for i in range (0,X_validation.shape[0],1):
    y_pred = softmax(np.matmul(W, X_validation[i]))*y_validation[i]
    L=Elastic_coef(y_validation[i],y_pred,i/(X_validation[0])
    #loss=np.append(loss,L))

import numpy as np
import matplotlib.pyplot as plt
from sklearn import datasets
from sklearn.model_selection import train_test_split
digits = datasets.load_digits ( )
X = digits.data
y = digits. target
y_one_hot = np.zeros(( y.shape [ 0 ] , len(np.unique ( y ) ) ) )
y_one_hot[np.arange(y.shape [ 0 ] ) , y ] = 1 # one hot targett or shape NxK
X_train,X_test,y_train,y_test = train_test_split (X, y_one_hot , test_size =0.3 , random_state=42)
X_test, X_validation, y_test, y_validation = train_test_split(X_test,y_test,test_size =0.5,random_state=42)
W = np.random.normal( 0 , 0.01 , ( len(np.unique ( y ) ) , X. shape [ 1 ] ) ) # weights of shape KxL

print("0",X_train.shape)
print(X_validation.shape)
print(X_test.shape)
def X_add (x,add): # 8 added values
    return np.random.normal( 0 , 0.01,(add,x.shape[1]))
def y_add (y,add): # 8 added values
    return np.random.normal( 0 , 0.01 , (add,y.shape[1]))
np.append(X_validation,(X_add(X_validation,8)),axis=0)
np.append(X_test,(X_add(X_test,8)),axis=0)
np.append(y_train,(y_add(y_train,8)),axis=0)
np.append(y_validation,(y_add(y_validation,8)),axis=0)
np.append(y_test,(y_add(y_test,8)),axis=0).shape
print("1",X_train.shape)
print(X_validation.shape)
print(X_test.shape)

